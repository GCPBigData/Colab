{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Dijkstra_Graph_NetWorkx","provenance":[],"private_outputs":true,"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"MW-aNAWITFd4","colab_type":"text"},"source":["## Introdução ao pyplot \n","matplotlib.pyploté uma coleção de funções de estilo de comando que fazem o matplotlib funcionar como MATLAB. Cada pyplotfunção faz alguma alteração em uma figura: por exemplo, cria uma figura, cria uma área de plotagem em uma figura, plota algumas linhas em uma área de plotagem, decora a plotagem com rótulos, etc."]},{"cell_type":"code","metadata":{"id":"q05qtzoaQyxr","colab_type":"code","colab":{}},"source":["!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n","!wget -q https://www-us.apache.org/dist/spark/spark-3.0.0-preview/spark-3.0.0-preview-bin-hadoop2.7.tgz\n","!tar xf spark-3.0.0-preview-bin-hadoop2.7.tgz\n","!pip install -q findspark\n","#!apt-get install python-software-properties\n","#!add-apt-repository ppa:igraph/ppa /y\n","#!apt-get update\n","#!pip install -q python-igraph"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y24M9ncPQ-bK","colab_type":"code","colab":{}},"source":["import os\n","os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n","os.environ[\"SPARK_HOME\"] = \"/content/spark-3.0.0-preview-bin-hadoop2.7\"\n","import findspark\n","findspark.init()\n","from pyspark import SparkContext, SparkConf\n","from pyspark.sql import SQLContext, SparkSession\n","from pyspark.sql.types import StructType, StructField, DoubleType, IntegerType, StringType\n","from time import sleep\n","from pyspark.streaming import StreamingContext\n","#Spark Contexto\n","#df = SparkSession.builder.master(\"local[*]\").getOrCreate()\n","sc = SparkContext.getOrCreate(SparkConf().setMaster(\"local[*]\"))\n","\n","from pyspark.sql import SparkSession\n","\n","ss = SparkSession \\\n","    .builder \\\n","    .appName(\"Dijkstra\") \\\n","    .config(\"spark.some.config.option\", \"some-value\") \\\n","    .getOrCreate()\n","    \n","sc.version "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GqTQsjudRAv7","colab_type":"code","colab":{}},"source":["import matplotlib.pyplot as plt\n","plt.plot([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n","plt.ylabel('some numbers')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5VebzrCuS9GR","colab_type":"code","colab":{}},"source":["## Valores crescene !!\n","plt.plot([1, 2, 3, 4], [1, 4, 9, 16])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yKnA6hoaTlwN","colab_type":"code","colab":{}},"source":["## Valores decrescente !!\n","plt.plot([1, 2, 3, 4], [-1, -4, -9, -16])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OPv73MGKTsTd","colab_type":"code","colab":{}},"source":["## Valores ondulados !!\n","plt.plot([1, -2, 3, -4])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1-wmhj3ST6Yj","colab_type":"code","colab":{}},"source":["#Formatando\n","plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'ro')\n","plt.axis([0, 6, 0, 20])\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q7EdHOsEUFfk","colab_type":"code","colab":{}},"source":["import numpy as np\n","# evenly sampled time at 200ms intervals\n","t = np.arange(0., 5., 0.2)\n","\n","# red dashes, blue squares and green triangles\n","plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aYkf6KlDUYQp","colab_type":"code","colab":{}},"source":["## Plotting with keyword strings\n","data = {'a': np.arange(50),\n","        'c': np.random.randint(0, 50, 50),\n","        'd': np.random.randn(50)}\n","data['b'] = data['a'] + 10 * np.random.randn(50)\n","data['d'] = np.abs(data['d']) * 100\n","\n","plt.scatter('a', 'b', c='c', s='d', data=data)\n","plt.xlabel('entry a')\n","plt.ylabel('entry b')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EhdGso-lUnnQ","colab_type":"code","colab":{}},"source":["## Plotting with categorical variables\n","names = ['group_a', 'group_b', 'group_c']\n","values = [1, 10, 100]\n","\n","plt.figure(figsize=(9, 3))\n","\n","plt.subplot(131)\n","plt.bar(names, values)\n","plt.subplot(132)\n","plt.scatter(names, values)\n","plt.subplot(133)\n","plt.plot(names, values)\n","plt.suptitle('Categorical Plotting')\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jq5z4aWLU3JH","colab_type":"code","colab":{}},"source":["## Dijkstra\n","def sssp_dijkstra(self, source):\n","\n","    total_vertex = len(self.vertex)\n","    Q = np.array(self.vertex)\n","\n","    dist = np.zeros(total_vertex)\n","    dist.fill(np.inf)\n","\n","    dist[self.vertex == source] = 0\n","\n","    while len(Q) != 0:\n","\n","        min = np.inf\n","        u = 0\n","        for q in Q:\n","            if dist[self.vertex == q] <= min:\n","                min = dist[self.vertex == q]\n","                u = q\n","\n","        Q = np.delete(Q, np.argwhere(Q == u))\n","\n","        for v in self.target[self.source == u]:\n","            alt = dist[self.vertex == u] + self.get_weight(u, v)\n","            index_v = self.vertex == v\n","            if alt < dist[index_v]:\n","                dist[index_v] = alt"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3XkO-FJbcIwB","colab_type":"code","colab":{}},"source":["def apsp_dijkstra(self):\n","\n","    result = np.full((self.vertex.size, self.vertex.size), np.inf)\n","    count = 0\n","    for v in self.vertex:\n","        result[count] = self.sssp_dijkstra(v)\n","        count = count + 1\n","\n","    return result"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_9Lwwt7ncKAs","colab_type":"code","colab":{}},"source":["from graph.Graph import Graph\n","from time import time\n","import os\n","\n","os.system('clear')\n","print(\"<--------Test Dijkstra------->\\n\")\n","\n","weights = [1, 2, 3, 4, 5]\n","graph = g.creategraph(6, .75, weights, directed=False)\n","graph.print_r()\n","print('.........................')\n","t = time()\n","print(graph.apsp_dijkstra())\n","elapsed = time() - t\n","print(\"Time: \", elapsed)\n","\n","graph.draw()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-zLFGZc0exHz","colab_type":"code","colab":{}},"source":["!pip install graph"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ExJhjc_gfO9u","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mRsD4DU2fAS3","colab_type":"code","colab":{}},"source":["from graph.Graph import Graph\n","\n","sources = [1, 2, 3, 0, 5, 1, 1, 3]\n","targets = [0, 0, 0, 5, 0, 2, 3, 1]\n","weights = [2, 2, 4, 1, 1, 3, 2, 2]\n","\n","graph = Graph(sources, targets, weights)\n","\n","graph.print_r()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cew-YOA7fMM8","colab_type":"code","colab":{}},"source":["graph.draw(with_weight=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UHJWfyJtjdnq","colab_type":"code","colab":{}},"source":["from _graph.GraphPro import GraphPro as g\n","from time import time\n","import os\n","\n","os.system('clear')\n","print(\"<--------Test Floyd-Warshall------->\\n\")\n","\n","weights = [1, 2, 3, 4, 5]\n","#graph = g.creategraph(6, .75, weights, directed=False)\n","sources = [0, 1, 0, 2, 0, 3, 0, 5, 1, 2, 1, 3, 1, 4, 1, 5, 2, 3, 2, 4, 3, 4, 3, 5, 4, 5]\n","targets = [1, 0, 2, 0, 3, 0, 5, 0, 2, 1, 3, 1, 4, 1, 5, 1, 3, 2, 4, 2, 4, 3, 5, 3, 5, 4]\n","weights = [2, 2, 2, 2, 4, 4, 1, 1, 3, 3, 2, 2, 4, 4, 4, 4, 2, 2, 1, 1, 3, 3, 5, 5, 1, 1]\n","graph = g(sources, targets, weights)\n","\n","graph.print_r()\n","print('.........................')\n","t = time()\n","print(graph.floyd_warshall())\n","elapsed = time() - t\n","print(\"Time: \", elapsed)\n","\n","graph.draw()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4VMOidT7ltZH","colab_type":"code","colab":{}},"source":["import networkx as nx \n","import matplotlib.pyplot as plt \n","\n","G = nx.Graph() \n","\n","plt.figure(figsize =(9, 12)) \n","G.add_edges_from([(1, 2), (1, 3), (2, 3), (2, 4), (2, 5), (3, 4), \n","\t\t\t\t\t\t(4, 5), (4, 6), (5, 7), (5, 8), (7, 8)]) \n","\n","# original Graph created \n","plt.subplot(211) \n","print(\"The original Graph:\") \n","\n","nx.draw_networkx(G) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"U0vVKNSXl8hz","colab_type":"code","colab":{}},"source":["H = G.subgraph([1, 2, 3, 4]) \n","# [1, 2, 3, 4] is the subset of \n","# the original set of nodes \n","\n","plt.subplot(212) \n","print(\"The Subgraph:\") \n","nx.draw_networkx(H) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"r2REo3-JmD46","colab_type":"code","colab":{}},"source":["import networkx as nx \n","import matplotlib.pyplot as plt \n","\n","G = nx.Graph() \n","\n","plt.figure(figsize =(9, 12)) \n","G.add_edges_from([(1, 2), (1, 3), (2, 3), (2, 4), (2, 5), (3, 4), \n","\t\t\t\t\t\t(4, 5), (4, 6), (5, 7), (5, 8), (7, 8)]) \n","\n","# First Graph created \n","plt.subplot(311) \n","nx.draw_networkx(G) \n","\n","H = nx.Graph() \n","H.add_edges_from([(13, 14), (13, 15), (13, 9), \n","\t\t\t\t(14, 15), (15, 10), (9, 10)]) \n","\n","# Second Graph created \n","plt.subplot(312) \n","nx.draw_networkx(H) \n","\n","\n","I = nx.union(G, H) \n","plt.subplot(313) \n","nx.draw_networkx(I) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"phEr1ajDmZGS","colab_type":"code","colab":{}},"source":["import networkx as nx \n","import matplotlib.pyplot as plt \n","\n","G = nx.Graph() \n","\n","plt.figure(figsize =(9, 18)) \n","G.add_edges_from([(1, 2), (2, 3)]) \n","\n","# First Graph created \n","plt.subplot(311) \n","nx.draw_networkx(G) \n","\n","H = nx.Graph() \n","H.add_edges_from([(6, 7)]) \n","# Second Graph created \n","plt.subplot(312) \n","nx.draw_networkx(H) \n","\n","\n","I = nx.cartesian_product(G, H) \n","plt.subplot(313) \n","nx.draw_networkx(I) \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"leP9eXaFqCSj","colab_type":"code","colab":{}},"source":["import networkx as nx \n","import matplotlib.pyplot as plt \n","\n","G = nx.Graph() \n","\n","plt.figure(figsize =(9, 18)) \n","G.add_edges_from([(1, 2), (2, 3), (3, 4),(-1, -2), (-2, -3), (-3, -4)]) \n","\n","# First Graph created \n","plt.subplot(311) \n","nx.draw_networkx(G) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jTarcjzYmn5Y","colab_type":"code","colab":{}},"source":["import networkx as nx \n","import matplotlib.pyplot as plt \n","\n","G = nx.Graph() \n","\n","plt.figure(figsize =(9, 15)) \n","G.add_edges_from([(1, 2), (1, 3), (2, 3), (2, 4)]) \n","\n","# First Graph created \n","plt.subplot(311) \n","nx.draw_networkx(G) \n","\n","H = nx.Graph() \n","H.add_edges_from([(3, 7), (7, 4), (3, 4)]) \n","# Second Graph created \n","plt.subplot(312) \n","nx.draw_networkx(H) \n","\n","\n","I = nx.compose(G, H) \n","plt.subplot(313) \n","nx.draw_networkx(I) \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gatUatkEq9QL","colab_type":"code","colab":{}},"source":["import networkx as nx \n","import matplotlib.pyplot as plt \n","\n","H = nx.Graph() \n","\n","plt.figure(figsize =(10, 15)) \n","\n","H.add_edges_from([(1, 2), (1, 3), (1, 4), (2, 4)])\n","\n","# Second Graph created \n","plt.subplot(312) \n","nx.draw_networkx(H) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sO6zsA6pmv8I","colab_type":"code","colab":{}},"source":["import networkx as nx \n","import matplotlib.pyplot as plt \n","\n","G = nx.Graph() \n","\n","plt.figure(figsize =(9, 16)) \n","G.add_edges_from([(1, 2), (1, 3), (2, 3), (2, 4)]) \n","\n","# Original Graph created \n","plt.subplot(211) \n","nx.draw_networkx(G) \n","\n","H = nx.complement(G) \n","plt.subplot(212) \n","nx.draw_networkx(H) \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"faNBamfIm8O4","colab_type":"code","colab":{}},"source":["import networkx as nx \n","import matplotlib.pyplot as plt \n","\n","G = nx.Graph() \n","\n","plt.figure(figsize =(9, 16)) \n","G.add_edges_from([(1, 2), (1, 3), (2, 3), (2, 4)]) \n","# Original Undirected Graph created \n","\n","plt.subplot(211) \n","nx.draw_networkx(G) \n","\n","H = nx.to_directed(G) \n","plt.subplot(212) \n","nx.draw_networkx(H) \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZvcSytzXnBhJ","colab_type":"code","colab":{}},"source":["import networkx as nx \n","import matplotlib.pyplot as plt \n","\n","G = nx.DiGraph() \n","\n","plt.figure(figsize =(9, 16)) \n","G.add_edges_from([(1, 2), (1, 3), (2, 4)]) \n","\n","# Original Directed Graph created \n","plt.subplot(211) \n","nx.draw_networkx(G) \n","\n","H = nx.to_undirected(G) \n","plt.subplot(212) \n","nx.draw_networkx(H) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"e2PgvQ81nGmq","colab_type":"code","colab":{}},"source":["import networkx as nx \n","import matplotlib.pyplot as plt \n","\n","plt.figure(figsize =(9, 100)) \n","\n","# Peterson Graph \n","plt.subplot(12, 1, 1) \n","G = nx.petersen_graph() \n","nx.draw_networkx(G) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WkjXIDDInMN6","colab_type":"code","colab":{}},"source":["# Tutte Graph \n","plt.subplot(12, 1, 2) \n","G = nx.tutte_graph() \n","nx.draw_networkx(G) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"S1o2zHd_nVDB","colab_type":"code","colab":{}},"source":["# Sedgewick Maze Graph \n","plt.subplot(12, 1, 3) \n","G = nx.sedgewick_maze_graph() \n","nx.draw_networkx(G) \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ae_P_EcNnXDP","colab_type":"code","colab":{}},"source":["# Tetrahedral Graph \n","plt.subplot(12, 1, 4) \n","G = nx.tetrahedral_graph() \n","nx.draw_networkx(G) \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UIqS4KUGna-V","colab_type":"code","colab":{}},"source":["# Complete Graph with 5 nodes \n","plt.subplot(12, 1, 5) \n","G = nx.complete_graph(6) \n","nx.draw_networkx(G) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bw5MYwtAnifH","colab_type":"code","colab":{}},"source":["# Complete Bipartite Graph with 5 and 3 nodes \n","plt.subplot(12, 1, 6) \n","G = nx.complete_bipartite_graph(5, 3) \n","nx.draw_networkx(G) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y9u7WsYanl3u","colab_type":"code","colab":{}},"source":["# Barbell Graph with clique of 4 and bridging of 2 nodes \n","plt.subplot(12, 1, 7) \n","\n","G = nx.barbell_graph(4, 2) \n","nx.draw_networkx(G) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QFMVlVZUnpK0","colab_type":"code","colab":{}},"source":["# Lollipop Graph with clique of 5 and path of 2 nodes \n","plt.subplot(12, 1, 8) \n","G = nx.lollipop_graph(5, 2) \n","nx.draw_networkx(G) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dmH7M8xUnt9N","colab_type":"code","colab":{}},"source":["# Erdos Renyi Graph with 20 nodes and probability of 0.25 \n","plt.subplot(12, 1, 9) \n","\n","G = nx.erdos_renyi_graph(20, 0.25) \n","nx.draw_networkx(G) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Twwc-Akln1sr","colab_type":"code","colab":{}},"source":["# Random Lobster Graph with 30 base \n","# nodes and probabilites of 0.8 \n","plt.subplot(12, 1, 12) \n","\n","G = nx.random_lobster(30, 0.8, 0.8) \n","nx.draw_networkx(G) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gBCYA32Dn3e_","colab_type":"code","colab":{}},"source":["import networkx as nx \n","\n","edges = [(1, 2), (1, 6), (2, 3), (2, 4), (2, 6), \n","\t\t(3, 4), (3, 5), (4, 8), (4, 9), (6, 7)] \n","\n","G.add_edges_from(edges) \n","nx.draw_networkx(G, with_label = True) \n","\n","print(\"Total number of nodes: \", int(G.number_of_nodes())) \n","print(\"Total number of edges: \", int(G.number_of_edges())) \n","print(\"List of all nodes: \", list(G.nodes())) \n","print(\"List of all edges: \", list(G.edges(data = True))) \n","print(\"Degree for all nodes: \", dict(G.degree())) \n","\n","print(\"Total number of self-loops: \", int(G.number_of_selfloops())) \n","print(\"List of all nodes with self-loops: \", list(G.nodes_with_selfloops())) \n","\n","print(\"List of all nodes we can go to in a single step from node 2: \", list(G.neighbors(2))) \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"q6IjCie3oS8G","colab_type":"code","colab":{}},"source":["# fixing the size of the figure \n","plt.figure(figsize =(10, 7)) \n","\n","node_color = [G.degree(v) for v in G] \n","# node colour is a list of degrees of nodes \n","\n","node_size = [0.0005 * nx.get_node_attributes(G, 'population')[v] for v in G] \n","# size of node is a list of population of cities \n","\n","edge_width = [0.0015 * G[u][v]['weight'] for u, v in G.edges()] \n","# width of edge is a list of weight of edges \n","\n","nx.draw_networkx(G, node_size = node_size, \n","\t\t\t\tnode_color = node_color, alpha = 0.7, \n","\t\t\t\twith_labels = True, width = edge_width, \n","\t\t\t\tedge_color ='.4', cmap = plt.cm.Blues) \n","\n","plt.axis('off') \n","plt.tight_layout(); "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VI9qxdb9ofnl","colab_type":"code","colab":{}},"source":["print(\"The various layout options are:\") \n","print([x for x in nx.__dir__() if x.endswith('_layout')]) \n","# prints out list of all different layout options \n","\n","node_color = [G.degree(v) for v in G] \n","node_size = [0.0005 * nx.get_node_attributes(G, 'population')[v] for v in G] \n","edge_width = [0.0015 * G[u][v]['weight'] for u, v in G.edges()] \n","\n","plt.figure(figsize =(10, 9)) \n","pos = nx.random_layout(G) \n","print(\"Random Layout:\") \n","\n","# demonstrating random layout \n","nx.draw_networkx(G, pos, node_size = node_size, \n","\t\t\t\tnode_color = node_color, alpha = 0.7, \n","\t\t\t\twith_labels = True, width = edge_width, \n","\t\t\t\tedge_color ='.4', cmap = plt.cm.Blues) \n","\n","\n","plt.figure(figsize =(10, 9)) \n","pos = nx.circular_layout(G) \n","print(\"Circular Layout\") \n","\n","# demonstrating circular layout \n","nx.draw_networkx(G, pos, node_size = node_size, \n","\t\t\t\tnode_color = node_color, alpha = 0.7, \n","\t\t\t\twith_labels = True, width = edge_width, \n","\t\t\t\tedge_color ='.4', cmap = plt.cm.Blues) \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jhUPrBxRoi0o","colab_type":"code","colab":{}},"source":["G2 = nx.path_graph(5) \n","\n","new = {0:\"Germany\", 1:\"Austria\", 2:\"France\", 3:\"Poland\", 4:\"Italy\"} \n","G2 = nx.relabel_nodes(G2, new) \n","nx.draw_networkx(G2, with_labels = True) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EUxLKSCRoolP","colab_type":"code","colab":{}},"source":["import networkx as nx \n","G = nx.DiGraph() \n","G.add_edges_from([(1, 1), (1, 7), (2, 1), (2, 2), (2, 3), \n","\t\t\t\t(2, 6), (3, 5), (4, 3), (5, 4), (5, 8), \n","\t\t\t\t(5, 9), (6, 4), (7, 2), (7, 6), (8, 7)]) \n","\n","plt.figure(figsize =(9, 9)) \n","nx.draw_networkx(G, with_label = True, node_color ='green') \n","\n","# getting different graph attributes \n","print(\"Total number of nodes: \", int(G.number_of_nodes())) \n","print(\"Total number of edges: \", int(G.number_of_edges())) \n","print(\"List of all nodes: \", list(G.nodes())) \n","print(\"List of all edges: \", list(G.edges())) \n","print(\"In-degree for all nodes: \", dict(G.in_degree())) \n","print(\"Out degree for all nodes: \", dict(G.out_degree)) \n","\n","print(\"Total number of self-loops: \", int(G.number_of_selfloops())) \n","print(\"List of all nodes with self-loops: \", \n","\t\t\tlist(G.nodes_with_selfloops())) \n","\n","print(\"List of all nodes we can go to in a single step from node 2: \", \n","\t\t\t\t\t\t\t\t\t\t\t\tlist(G.successors(2))) \n","\n","print(\"List of all nodes from which we can go to node 2 in a single step: \", \n","\t\t\t\t\t\t\t\t\t\t\t\t\tlist(G.predecessors(2))) \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bLsZAvfOovGD","colab_type":"code","colab":{}},"source":["import networkx as nx \n","import matplotlib.pyplot as plt \n","\n","G = nx.DiGraph() \n","\n","plt.figure(figsize =(9, 16)) \n","G.add_edges_from([(1, 2), (1, 3), (1, 4)]) \n","\n","# Original Directed Graph created \n","plt.subplot(211) \n","nx.draw_networkx(G) \n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EnGONZIDyIRI","colab_type":"code","colab":{}},"source":["#!/usr/bin/env python\n","\"\"\"\n","Davis Southern Club Women\n","\n","Shows how to make unipartite projections of the graph and compute the\n","properties of those graphs.\n","\n","These data were collected by Davis et al. in the 1930s.  \n","They represent observed attendance at 14 social events by 18 Southern women.  \n","The graph is bipartite (clubs, women).\n","\"\"\"\n","import networkx as nx\n","import networkx.algorithms.bipartite as bipartite\n","\n","G = nx.davis_southern_women_graph()\n","women = G.graph['top']\n","clubs = G.graph['bottom']\n","\n","print(\"Biadjacency matrix\")\n","print(bipartite.biadjacency_matrix(G,women,clubs))\n","\n","# project bipartite graph onto women nodes\n","W = bipartite.projected_graph(G, women)\n","print('') \n","print(\"#Friends, Member\")\n","for w in women:\n","    print('%d %s' % (W.degree(w),w))\n","\n","# project bipartite graph onto women nodes keeping number of co-occurence\n","# the degree computed is weighted and counts the total number of shared contacts\n","W = bipartite.weighted_projected_graph(G, women)\n","print('') \n","print(\"#Friend meetings, Member\")\n","for w in women:\n","    print('%d %s' % (W.degree(w,weight='weight'),w))\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FBiWtWOwY81h","colab_type":"code","colab":{}},"source":["#!/usr/bin/env python\n","\"\"\"\n","Centrality measures of Krackhardt social network.\n","\"\"\"\n","__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n","__date__ = \"$Date: 2005-05-12 14:33:11 -0600 (Thu, 12 May 2005) $\"\n","__credits__ = \"\"\"\"\"\"\n","__revision__ = \"$Revision: 998 $\"\n","#    Copyright (C) 2004 by\n","#    Aric Hagberg <hagberg@lanl.gov>\n","#    Dan Schult <dschult@colgate.edu>\n","#    Pieter Swart <swart@lanl.gov>\n","#    All rights reserved.\n","#    BSD license.\n","\n","from networkx import *\n","import networkx as nx \n","import matplotlib.pyplot as plt \n","\n","G=krackhardt_kite_graph()\n","\n","print(\"Betweenness\")\n","b=betweenness_centrality(G)\n","for v in G.nodes():\n","    print(\"%0.2d %5.3f\"%(v,b[v]))\n","\n","print(\"Degree centrality\")\n","d=degree_centrality(G)\n","for v in G.nodes():\n","    print(\"%0.2d %5.3f\"%(v,d[v]))\n","\n","print(\"Closeness centrality\")\n","c=closeness_centrality(G)\n","for v in G.nodes():\n","    print(\"%0.2d %5.3f\"%(v,c[v]))\n","\n","plt.subplot(212) \n","nx.draw_networkx(G) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"447PBstraQSR","colab_type":"code","colab":{}},"source":["# Cuthill-McKee ordering of matrices\n","# The reverse Cuthill-McKee algorithm gives a sparse matrix ordering that\n","# reduces the matrix bandwidth.\n","# Requires NumPy\n","# Copyright (C) 2011 by\n","# Aric Hagberg <aric.hagberg@gmail.com>\n","# BSD License\n","import networkx as nx\n","from networkx.utils import reverse_cuthill_mckee_ordering\n","import numpy as np\n","\n","# build low-bandwidth numpy matrix\n","G=nx.grid_2d_graph(3,3)\n","rcm = list(reverse_cuthill_mckee_ordering(G))\n","print(\"ordering\",rcm)\n","\n","print(\"unordered Laplacian matrix\")\n","A = nx.laplacian_matrix(G)\n","x,y = np.nonzero(A)\n","#print(\"lower bandwidth:\",(y-x).max())\n","#print(\"upper bandwidth:\",(x-y).max())\n","print(\"bandwidth: %d\"%((y-x).max()+(x-y).max()+1))\n","print(A)\n","\n","B = nx.laplacian_matrix(G,nodelist=rcm)\n","print(\"low-bandwidth Laplacian matrix\")\n","x,y = np.nonzero(B)\n","#print(\"lower bandwidth:\",(y-x).max())\n","#print(\"upper bandwidth:\",(x-y).max())\n","print(\"bandwidth: %d\"%((y-x).max()+(x-y).max()+1))\n","print(B)\n","\n","plt.subplot(212) \n","nx.draw_networkx(G) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"t4ehezcUbOPm","colab_type":"code","colab":{}},"source":["#!/usr/bin/env python\n","\"\"\"\n","Compute some network properties for the lollipop graph.\n","\"\"\"\n","#    Copyright (C) 2004 by\n","#    Aric Hagberg <hagberg@lanl.gov>\n","#    Dan Schult <dschult@colgate.edu>\n","#    Pieter Swart <swart@lanl.gov>\n","#    All rights reserved.\n","#    BSD license.\n","\n","from networkx import *\n","\n","G = lollipop_graph(4,6)\n","\n","pathlengths=[]\n","\n","print(\"source vertex {target:length, }\")\n","for v in G.nodes():\n","    spl=single_source_shortest_path_length(G,v)\n","    print('%s %s' % (v,spl))\n","    for p in spl.values():\n","        pathlengths.append(p)\n","\n","print('')\n","print(\"average shortest path length %s\" % (sum(pathlengths)/len(pathlengths)))\n","\n","# histogram of path lengths\n","dist={}\n","for p in pathlengths:\n","    if p in dist:\n","        dist[p]+=1\n","    else:\n","        dist[p]=1\n","\n","print('')\n","print(\"length #paths\")\n","verts=dist.keys()\n","for d in sorted(verts):\n","    print('%s %d' % (d,dist[d]))\n","\n","print(\"radius: %d\" % radius(G))\n","print(\"diameter: %d\" % diameter(G))\n","print(\"eccentricity: %s\" % eccentricity(G))\n","print(\"center: %s\" % center(G))\n","print(\"periphery: %s\" % periphery(G))\n","print(\"density: %s\" % density(G))\n","#plt.subplot(212) \n","nx.draw_networkx(G) \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FlvQN8CebQA-","colab_type":"code","colab":{}},"source":["#!/usr/bin/env python\n","\"\"\"\n","Read and write graphs.\n","\"\"\"\n","__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n","#    Copyright (C) 2004-2015 by\n","#    Aric Hagberg <hagberg@lanl.gov>\n","#    Dan Schult <dschult@colgate.edu>\n","#    Pieter Swart <swart@lanl.gov>\n","#    All rights reserved.\n","#    BSD license.\n","\n","from networkx import *\n","import sys\n","\n","#G=grid_2d_graph(50,50)  # 5x5 grid\n","\n","sources = [1, 2, 3, 0, 5, 1, 1, 3]\n","targets = [0, 0, 0, 5, 0, 2, 3, 1]\n","weights = [2, 2, 4, 1, 1, 3, 2, 2]\n","\n","G = grid_2d_graph(sources, targets, weights)\n","\n","try: # Python 2.6+\n","    write_adjlist(G,sys.stdout) # write adjacency list to screen\n","except TypeError: # Python 3.x\n","\n","    write_adjlist(G,sys.stdout.buffer) # write adjacency list to screen\n","    write_edgelist(G,path=\"grid.edgelist\",delimiter=\":\")# write edgelist to grid.edgelist\n","\n","H=read_edgelist(path=\"grid.edgelist\",delimiter=\":\")# read edgelist from grid.edgelist\n","\n","#plt.subplot(212) \n","nx.draw_networkx(G) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xfGmRkJ6eTSN","colab_type":"code","colab":{}},"source":["#!/usr/bin/env python\n","\"\"\"\n","Draw a graph with matplotlib.\n","You must have matplotlib for this to work.\n","\"\"\"\n","try:\n","    import matplotlib.pyplot as plt\n","except:\n","    raise\n","\n","import networkx as nx\n","\n","G=nx.path_graph(10)\n","\n","nx.draw(G)\n","plt.savefig(\"simple_path.png\") # save as png\n","plt.show() # displ"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"x0AcJ1lEfBPy","colab_type":"code","colab":{}},"source":["#!/usr/bin/env python\n","\"\"\"\n","An example using Graph as a weighted network.\n","\"\"\"\n","__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n","try:\n","    import matplotlib.pyplot as plt\n","except:\n","    raise\n","\n","import networkx as nx\n","\n","G=nx.Graph()\n","\n","G.add_edge('a','b',weight=0.6)\n","G.add_edge('a','c',weight=0.2)\n","G.add_edge('c','d',weight=0.1)\n","G.add_edge('c','e',weight=0.7)\n","G.add_edge('c','f',weight=0.9)\n","G.add_edge('a','d',weight=0.3)\n","\n","elarge=[(u,v) for (u,v,d) in G.edges(data=True) if d['weight'] >0.5]\n","esmall=[(u,v) for (u,v,d) in G.edges(data=True) if d['weight'] <=0.5]\n","\n","pos=nx.spring_layout(G) # positions for all nodes\n","\n","# nodes\n","nx.draw_networkx_nodes(G,pos,node_size=700)\n","\n","# edges\n","nx.draw_networkx_edges(G,pos,edgelist=elarge,\n","                    width=6)\n","nx.draw_networkx_edges(G,pos,edgelist=esmall,\n","                    width=6,alpha=0.5,edge_color='b',style='dashed')\n","\n","# labels\n","nx.draw_networkx_labels(G,pos,font_size=20,font_family='sans-serif')\n","\n","plt.axis('off')\n","plt.savefig(\"weighted_graph.png\") # save as png\n","plt.show() # display"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"147X0bbdbQS_","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1lAL118sbOw7","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dACI_E4ubPLf","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}