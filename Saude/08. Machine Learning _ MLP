{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"08. Machine Learning : MLP","provenance":[{"file_id":"1WmvzK7nB_cl8ZiU6QxrCfmpxQr54HzWd","timestamp":1579706754510}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"xX15VCc-r40e","colab_type":"text"},"source":["# Redes Neurais Artificiais (ANN)"]},{"cell_type":"markdown","metadata":{"id":"HRMWTMqawQCH","colab_type":"text"},"source":["## Perceptron\n","\n","O perceptron é um modelo matemático discriminante linear que busca, através de um reta, separar duas nuvens de dados, sendo cada uma dessas nuvens pertencentes a classes distintas.\n","\n","Esse modelo é uma abstração do estudo biológico do potêncial de ação do neurônio de [Hodgkin–Huxley](https://en.wikipedia.org/wiki/Hodgkin%E2%80%93Huxley_model), que foi baseado no neurônio de uma lula gigante.\n","\n","<figure class=\"image\">\n","  <img src=\"https://hsandmann.github.io/espm.ai.society.2019.2/assets/neuron.png\" alt=\"Esquema teórico de um neurônio biológico\">\n","  <figcaption>Esquema teórico de um neurônio biológico</figcaption>\n","</figure>\n","\n","Já um modelo matemático, bem reduzido, pode ser modelado pelo seguinte esquema:\n","\n","<figure class=\"image\">\n","  <img src=\"https://github.com/hsandmann/espm.ai.society.2019.2/raw/master/assets/perceptron.png\" alt=\"Perceptron\">\n","  <figcaption>Perceptron</figcaption>\n","</figure>\n","\n","E sua equação é dada por:\n","\n","<center>\n","  <img src=\"http://latex.codecogs.com/svg.latex? y = f \\Bigg( \\sum_{i = 1}^{N}{x_i w_i} \\Bigg) \"/>\n","</center>\n","\n","Onde:\n","\n","<table>\n","  <tr>\n","    <td><img src=\"http://latex.codecogs.com/svg.latex? x_{i} \"/></td>\n","    <td>é a entrada de índice i</td>\n","  </tr>\n","  <tr>\n","    <td><img src=\"http://latex.codecogs.com/svg.latex? w_{i} \"/></td>\n","    <td>é o peso de índice i</td>\n","  </tr>\n","  <tr>\n","    <td><img src=\"http://latex.codecogs.com/svg.latex? f(\\cdot) \"/></td>\n","    <td>é a função de ativação</td>\n","  </tr>\n","  <tr>\n","    <td><img src=\"http://latex.codecogs.com/svg.latex? y \"/></td>\n","    <td>é a saída</td>\n","  </tr>\n","</table>\n","\n","Conhecimendo como modelo de Rosenblatt<sup>[1]</sup>.\n"]},{"cell_type":"markdown","metadata":{"id":"VMRvSKJeDvgo","colab_type":"text"},"source":["### Exemplos de funções de ativação"]},{"cell_type":"code","metadata":{"id":"AiCATmRFD13c","colab_type":"code","outputId":"5ddb1a72-58f6-40c7-8c60-9fdbae6f1c87","executionInfo":{"status":"ok","timestamp":1572556007870,"user_tz":180,"elapsed":2278,"user":{"displayName":"Humberto Sandmann","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCJ04bOJwqmidjoWNpKefPSjtugCvVyNSsK0CYxlA=s64","userId":"15979259997226628999"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"source":["import numpy as np \n","import matplotlib.pyplot as plt \n","  \n","in_array = np.linspace(-np.pi, np.pi, 12) \n","\n","plt.figure(figsize=(9, 3))\n","\n","plt.subplot(131)\n","plt.plot(in_array, np.tanh(in_array), color = 'red', marker = \"o\") \n","plt.title(\"tanh()\") \n","plt.xlabel(\"x\")\n","plt.ylabel(\"y\") \n","\n","plt.subplot(132)\n","plt.plot(in_array, 1 / (1 + np.exp(-in_array)), color = 'red', marker = \"o\") \n","plt.title(\"sigmoide()\") \n","plt.xlabel(\"x\")\n","plt.ylabel(\"y\") \n","\n","plt.subplot(133)\n","plt.plot(in_array, in_array * (in_array > 0), color = 'red', marker = \"o\") \n","plt.title(\"relu()\") \n","plt.xlabel(\"x\")\n","plt.ylabel(\"y\") \n","\n","plt.show() "],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 648x216 with 3 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"wQO73LFFsAQc","colab_type":"text"},"source":["## Problema do XOR\n","\n","O dos grandes problemas da área de classificação de padrões é a tarefa de traçar uma rede de separabilidade (fronteira de Voronói) entre as mais diversas distribuições de classes num espaço qualquer.\n","\n","De forma ilustrativa, na imagem da esquerda é possível separar os números 1s os números 0s com uma linha verde, por isso, é um problema **linearmente separável**. No contexto, está se ilustrando a tabelas verdade de operações booleanas (AND, NAND, OR, NOR).\n","\n","Já, no caso da figura mais a direita, é notável que não é possível traçar apenas um linha a fim de separar as distribuições de classes. Logo, trata-se de um problema **não linearmente separável**.\n","\n","![](https://hsandmann.github.io/espm.ai.society.2019.2/assets/xor.png)\n","\n","O problema aqui repousa em melhor traçar tais fronteiras e com um Perceptron simples, não é possível solucionar problemas **não linearmente separáveis**.\n","\n","Esse problema foi trazido pelo livro escrito por Marvin Minsky e Seymour Papert, ironicamente chamado de \"Perceptrons\", 1969.\n","\n","A partir de tal publicação, foi iniciado o período conhecido como **Inverno da Inteligência Artificial**."]},{"cell_type":"markdown","metadata":{"id":"7dE2eLdB6zf7","colab_type":"text"},"source":["## Multi Layer Perceptron\n","\n","Ao longo do inverno da inteligência artificial, diversos pesquisadores tentaram propor o uso encadeado de neurônios, a fim de resolver o **problema do XOR**. Ou seja, uma rede neural de múltiplas camadas, MLP.\n","\n","<figure class=\"image\">\n","  <img src=\"https://github.com/hsandmann/espm.ai.society.2019.2/raw/master/assets/mlp.png\" alt=\"MLP\">\n","  <figcaption>Esquema de uma MLP</figcaption>\n","</figure>\n","\n","Porém, o grande problema dessa abordagem era encontrar um método de correção da matriz de conhecimento, ou seja, a matriz **W**. Até que em 1986, foi proposto o método de **backpropagação**, onde os pesos da rede poderiam ser ajustados de acordo com o erro propagado pelos dados de entrada<sup>[3]</sup>.\n","\n","Ainda, posteriormente, no artigo de Cybenko<sup>[4]</sup>, utilizando o teorema de Kolmorogov <sup>[2]</sup>, ficou provado que as redes neurais, utilizando sigmóides, poderiam aproximar qualquer função, mesmo que essa seja analiticamente desconhecida. Por isso, uma rede neural é um **estimador universal de funções**."]},{"cell_type":"markdown","metadata":{"id":"c8BBEYFn9_yV","colab_type":"text"},"source":["### Solução do Problema XOR por uma MLP"]},{"cell_type":"code","metadata":{"id":"SToywuUDgqed","colab_type":"code","outputId":"e700779e-577a-47c6-d799-8c1cc82a1805","executionInfo":{"status":"ok","timestamp":1572556481404,"user_tz":180,"elapsed":764,"user":{"displayName":"Humberto Sandmann","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCJ04bOJwqmidjoWNpKefPSjtugCvVyNSsK0CYxlA=s64","userId":"15979259997226628999"}},"colab":{"base_uri":"https://localhost:8080/","height":134}},"source":["# https://scikit-learn.org/stable/modules/neural_networks_supervised.html\n","from sklearn.neural_network import MLPClassifier\n","\n","X = [[0., 0.], [1., 1.], [0., 1.], [1., 0.]]\n","y = [0, 0, 1, 1]\n","\n","clf = MLPClassifier(solver='lbfgs', alpha=1e-5,\n","                    hidden_layer_sizes=(5, 2), random_state=1)\n","\n","clf.fit(X, y)\n","MLPClassifier(activation='relu', alpha=1e-05, batch_size='auto',\n","              beta_1=0.9, beta_2=0.999, early_stopping=False,\n","              epsilon=1e-08, hidden_layer_sizes=(5, 2),\n","              learning_rate='constant', learning_rate_init=0.001,\n","              max_iter=200, momentum=0.9, n_iter_no_change=10,\n","              nesterovs_momentum=True, power_t=0.5, random_state=1,\n","              shuffle=True, solver='lbfgs', tol=0.0001,\n","              validation_fraction=0.1, verbose=False, warm_start=False)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["MLPClassifier(activation='relu', alpha=1e-05, batch_size='auto', beta_1=0.9,\n","              beta_2=0.999, early_stopping=False, epsilon=1e-08,\n","              hidden_layer_sizes=(5, 2), learning_rate='constant',\n","              learning_rate_init=0.001, max_iter=200, momentum=0.9,\n","              n_iter_no_change=10, nesterovs_momentum=True, power_t=0.5,\n","              random_state=1, shuffle=True, solver='lbfgs', tol=0.0001,\n","              validation_fraction=0.1, verbose=False, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"LD36HclKCH6P","colab_type":"code","outputId":"8d0f7e76-cac2-405a-8fa2-ae370c887b7b","executionInfo":{"status":"ok","timestamp":1572556496768,"user_tz":180,"elapsed":775,"user":{"displayName":"Humberto Sandmann","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mCJ04bOJwqmidjoWNpKefPSjtugCvVyNSsK0CYxlA=s64","userId":"15979259997226628999"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["clf.predict([[0., 1.], [1., 0.]])"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1])"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"oh6SWJrU85lb","colab_type":"text"},"source":["## Referências\n","\n","1. Rosenblatt, Frank. x. [Principles of Neurodynamics: Perceptrons and the Theory of Brain Mechanisms](https://apps.dtic.mil/dtic/tr/fulltext/u2/256582.pdf). Spartan Books, Washington DC, 1961.\n","\n","2. A. N. Kolmogorov, [“On the representation of continuous functions of many variables by superposition of continuous functions of one variable and addition”](https://cs.uwaterloo.ca/~y328yu/classics/Kolmogorov57.pdf), Dokl. Akad. Nauk SSSR, 114:5 (1957), 953–956.\n","\n","3. Rumelhart, David E., Geoffrey E. Hinton, and R. J. Williams. [\"Learning Internal Representations by Error Propagation\"](https://apps.dtic.mil/dtic/tr/fulltext/u2/a164453.pdf). David E. Rumelhart, James L. McClelland, and the PDP research group. (editors), Parallel distributed processing: Explorations in the microstructure of cognition, Volume 1: Foundation. MIT Press, 1986.\n","\n","4. Cybenko, G. 1989. [Approximation by superpositions of a sigmoidal function](https://pdfs.semanticscholar.org/05ce/b32839c26c8d2cb38d5529cf7720a68c3fab.pdf) - Mathematics of Control, Signals, and Systems, 2(4), 303–314."]},{"cell_type":"code","metadata":{"id":"fqpbjXkKzU06","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}